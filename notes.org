
* GLEW_ERROR_NO_GL_VERSION
If glewInit() is called before an OpenGL context is made then it will return the error code GLEW_ERROR_NO_GL_VERSION

* XLIB_ILLEGAL_ACCESS / pointer not compatible with _XPrivDisplay
From the xlib docs
#+BEGIN_SRC c
/*
 * Display datatype maintaining display specific data.
 * The contents of this structure are implementation dependent.
 * A Display should be treated as opaque by application code.
 */
#ifndef XLIB_ILLEGAL_ACCESS
typedef struct _XDisplay Display;
#endif

struct _XPrivate;		/* Forward declare before use for C++ */
struct _XrmHashBucketRec;

typedef struct
#ifdef XLIB_ILLEGAL_ACCESS
_XDisplay
#endif
#+END_SRC

* XDisplay
The  X  "Display"  is  more  or  a  connection  to  an  Xserver  rather  than  a
"display". The "display_name" is also rather  poorly named and is actually not a
name at all and rather a transport protocol/x display number specifier.

* glXGetProcAddress Dynamic GL function loading
Whilst this is touted as an important feature its completely irrelevant for
casual prototyping and gets in the way. It is essentially a mechanism to improve
portable of an executable by finding the right functions for the platform at
runtime.

TODO: I still need to find out why this is so important

* Do while Loop Escape Sequence
Just jumping to the end of a function without gotos can be awkward as heck. I
divised a do while loop cheat to give a quick and dirty way to jump across a
section of code using break;. A sensible way to do it would be classes and
constructors.  However for quick prototyping this feels cumbersome for no
reason. I could have still done the goto but I had issues with the program
complaining I was trying to put gotos after declarations, which kind of defeated
the point of me using the goto... ie, getting around doing extra work to get
around basic control flow problems. Exceptions feels rather useless in this
place because they have no access to variables even within the same block for
some reason.

I guess you could use a try-catch block in a similar way but you have to put the
actual contination code OUTSIDE the exception block.

* Stack is too small for pixel buffers
For cache reasons the memory stack is rather small and 12MB of data will randomaly cause a segfault

* template class functions can't be in cpp files
The implementation isn't generated upfront with templated functions and for some
reason will fail if its not defined in the header that was included

* OpenGL is column major
OpenGL is  column major  and runs down  the y-axis first.  C++ doesn't  have any
major at all and is completely dependent  on implementation since 2D arrays in C
isn't a real thing but rather a quirky hack of how pointers work

* glSetPos2f is -0.5 off from rendering glDrawPixel where it should be
I have no idea why this is. it just is.

* OpenGL uses standard bottom-left up coordinate systems
Interesting anecdote different to how CRts work

* TODO
** Make i_renderer::shader_compile auto prefix name with shader_<type>
