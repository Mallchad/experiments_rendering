--[[
   GPL3 License
   Copyright (c) 2021 Mallchad
   This source provides the right to be freely used in any form,
   so long as modified variations remain available publically, or open request.
   Modified versions must be marked as such.
   The source comes with no warranty of any kind.
]]--

require( "os" )
require( "string" )
require( "traits" )

-- 'DEBUG_IGNORE' only needs to be set to be considered true
global UNSAFE: boolean;
global debug_ignore: boolean = os.getenv("DEBUG_IGNORE") or nil;

global log_verbose: boolean;
global log_quiet: boolean;
global dry_run: boolean;

global poison_stdlib_disable: boolean;
global gmodule_name: string = "REPLACE ME set gmodule_name";

-- Helper functions

--- Temporary Logging facilities that will error if 'debug_ignore' is false
-- This value is considered true if enviornment variable 'DEBUG_IGNORE'
-- has been set
global function TLOG(...): void
   assert(debug_ignore, "Debugging is disabled, you should delete this temporary line")
   print("TLOG:",...)
end

global function safe_assert(condition: boolean, message: string): void
   message = message or "An undocumented error has occured"
   if condition == false and debug_ignore == nil then
      error("[ safe_assert ] "..message)
   elseif condition == false then
      print("[ safe_assert ] (supressed): "..message)
   end
end

--- Error message that can be disabled
global function safe_error(message: string): void
   message = message or "An undocumented error has occured"
   assert(debug_ignore, "[ safe_error ] "..message)
   print("[ safe_error ] (supressed): "..message)
end

--- Write a message to stdout, adhering to 'log_quiet'
global function log(...: varargs): void
   if log_quiet ~= true then
      print( "[ "..gmodule_name .." ]", ...)
   end
end

--- ValueLog Write to stdout, making a variable the 'subject' of the message
-- All arguments are automatically passed through 'tostring'.
-- The value argument is automatically quoted.
-- The varaiadic arugments are space seperated
global function vallog(value: auto, ...: varargs): void
   local messages: auto = ...
   local value_string: stringbuilder;

   local message_string: stringbuilder;

 local x_message: string;
   ## for i_arg = 1, select("#", messages) do
      x_message = #[ select(i_arg, messages) ]#;
      message_string:write( message_string, x_message, " " );
   ## end

   if log_quiet ~= true then
      print(value_string.." : "..message_string)
   end
end

--- Debug version of vallog
global function dvallog(value: auto, ...: varargs): void
   local message_string: stringbuilder;
   local value_string: stringbuilder;

   local x_message: string;
   ## for i_arg = 1, select("#", ...) do
      x_message = #[ select(i_arg, ...) ]#;
      message_string:write( message_string, x_message, " " );
   ## end

   value_string:write( value )

   if log_verbose and log_quiet ~= true then
      if #value_string <= 80 then
         -- print(#value_string)
         print("[ dlog ]", value_string.." : "..message_string)
      else
         -- Reverse the order if the value is huge for readability
         print("[ dlog ]", message_string.." : \n"..value_string)
      end
   end
end

--- Run a console command and log command if verbose
-- Will not run any commands if 'dry_run' is true
global function safe_execute(command: string): (boolean, string, integer)
   local success, err, code = false, "DRY_RUN", -1

   if dry_run ~= true then
      dvallog(command, "executing command")
      success, err, code = os.execute(command)
   else
      vallog(command, "command would have been executed")
   end

   return success, err, code;
end

global function unsafe_execute(command: string, operation_description: string):
      (boolean, string, integer)

   safe_assert(#operation_description > 0,
               "unsafe commands must be well documented")

   if dry_run ~= true and UNSAFE then
      dvallog(command, "executing command")
      return os.execute(command)
   else
      vallog(command, "UNSAFE command would have been executed")
      return nil
   end
end

--- Check if a file or directory exists in this path
-- @tparam string file of type string which is checked to exist
global function file_exists(file: string): boolean
   local success: boolean;
   local err: string;
   local code: integer;
   success, err, code = os.rename(file, file)
   if success == false then
      if code == 13 then
         -- Permission denied, but it exists
         return true
      end
   end
   return success
end

--- Check if a directory exists in this path
global function dir_exists(path: string): boolean
   -- "/" works on both Unix and Windows
   return file_exists(path.."/")
end

global function copy_file(source: string, destination: string): boolean
   safe_error("UNIMPLIMENTED")
   -- TODO("This is cmake only, this is dumb.")
   -- local command = ()
   -- dvallog(command, "Command will be executed")
   -- safe_execute(command)
   -- log(source, destination)
   return false;
end
