#!/bin/env nelua

require( "lib.shim_lib" )
require( "arg" )
-- poison_stdlib(_G)


gmodule_name = "Build Script"
log_verbose = true

--[[
   -Werror-no-return-type
   If there is no return value it can crash on some platforms, it should be an error

   -Werror=inconsistent-missing-override
   This is a a program-crippling bug if you call the wrong virtual/overriden function, never let it go unnoticed
   -fmodules-ts
   Enable C++20 moduels

   -Werror-shadow

   This is a f***ing awful feature of programming languages that should've never
   been valid syntax it leads to breaking references between nearby variable
   names and causes things to not update. Always error on this stupidity
]]--

local build_universal_warnings: string = "-Wpedantic -Wall -Wno-unused-value -Wno-padded -Werror=return-type -Werror=inconsistent-missing-override -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-documentation-unknown-command -Wno-unreachable-code-break -Werror=shadow "
local build_universal_arguments: string = build_universal_warnings.."-std=c++20 -fuse-ld=lld -I../tracy -lX11 -lGL source/*.cpp -ldl -Iexternal/include -Isource -fmodules-ts "

local build_command: string = "clang++ -g " ..build_universal_arguments
local build_command_shipping_test: string = "clang++ -g -O2 -march=x86-64 -Weverything -Wno-implicit-int-float-conversion -Wno-sign-conversion " ..build_universal_arguments
local tracy_arguments: string = "build/TracyClient.o -DTRACY_ENABLE -lpthread -ldl "  -- Tracy

--[[
   -Wno-unused-variable/-Wno-unused-private-field
   Whilst this is a very useful warning it doesn't actually effect the program behaviour much,
   and would be best kept to actual testing and refactoring times, particularly before shipping
   -Wno-abstract-final-class
   Noisy, uneeded
]]--
local build_debug_extras: string = "-O0 -g -DDEBUG_INTERFACE -Wno-unused-variable -Wno-unused-private-field -Wno-abstract-final-class -fsanitize=address "

local build_extras: string = ""
if arg[1] == "tracy" or arg[2] == "tracy" then
   log( "Enabled tracy profiler, linking client to build" )
   build_extras = tracy_arguments .. build_extras
end

   local success: boolean;
   local err: string;
   local code: integer;
   success, err, code = false, "", -1
local build_command_string = "ccache " .. build_command .. build_extras

local tracy_obj_exists = file_exists("build/TracyClient.o")
if (tracy_obj_exists ~= true) then
   log( "No TracyClient.o obj file, building the unit" )
   safe_execute(" clang++ -c -g -O2 -DTRACY_ENABLE -std=c++20 -march=x86-64 ../tracy/TracyClient.cpp -o build/TracyClient.o" )
else
   log( "TracyClient.o obj file exists, continuing to build" )
end

if (arg[1] == "debug" or arg[2] == "debug") then
   build_command_string = build_command_string .. build_extras .. build_debug_extras
   log( "Building a debug build (does nothing of note)" )

elseif (arg[1] == "shipping_test" or arg[2] == "shipping_test") then
   build_command_string = build_command_shipping_test .. build_extras

   log( "Building optimized shipping build, checking all warnings" )
else
   log( "Argument for build config empty or not supported, can be [debug] or [shipping_test]" )
   os.exit(1)
end

log( "Running command: \n ".. build_command_string )
log("-------------------------------------------------------------------------------------\n")
success, err, code = safe_execute( build_command_string )

os.exit(code)
